name: Build and Push OCI CLI Image

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  push:
    branches: [ "main" ]
    paths:
      - 'OracleCloudInfrastructure/oci-cli/*'
      - '.github/workflows/build-and-push-oci-cli-image.yml'
  pull_request:
    paths:
      - 'OracleCloudInfrastructure/oci-cli/*'
      - '.github/workflows/build-and-push-oci-cli-image.yml'
    branches: [ "main" ]


env:
  IMAGE_NAME: oci-cli

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch latest OCI CLI version
        id: fetch-version
        run: |
          OCI_CLI_VERSION=$(curl -s https://pypi.org/pypi/oci-cli/json | jq -r .info.version)
          echo "Latest OCI CLI version: $OCI_CLI_VERSION"
          echo "VERSION=$OCI_CLI_VERSION" >> "$GITHUB_ENV"

      - name: Check if image with this version already exists
        id: check-image
        run: |
          IMAGE_TAG="ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME:$VERSION"
          echo "Checking if image $IMAGE_TAG exists..."
          if docker manifest inspect $IMAGE_TAG > /dev/null 2>&1; then
            echo "Image already exists, skipping build."
            echo "SKIP_BUILD=true" >> "$GITHUB_ENV"
          else
            echo "Image does not exist, proceeding with build."
          fi

      - name: Set up QEMU
        if: env.SKIP_BUILD != 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker BuildX
        if: env.SKIP_BUILD != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Lowercase repository owner
        id: repo-owner
        run: |
          echo "repo-owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Log into GitHub Container Registry
        if: env.SKIP_BUILD != 'true' && github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate container image metadata
        if: env.SKIP_BUILD != 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.repo-owner.outputs.repo-owner }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=true
          labels: |
            provider=${REPO_OWNER}
            issues=https://github.com/${{ steps.repo-owner.outputs.repo-owner }}/docker-images/issues
            org.opencontainers.image.licenses=UPL-1.0
            org.opencontainers.image.vendor=${REPO_OWNER}
            org.opencontainers.image.title=OCI CLI
            org.opencontainers.image.version=${{ env.VERSION }}
            org.opencontainers.image.description=Oracle Cloud Infrastructure Command Line Interface
            org.opencontainers.image.source=https://github.com/oracle/docker-images/tree/main/OracleCloudInfrastructure/oci-cli
            org.opencontainers.image.documentation=https://docs.oracle.com/en-us/iaas/Content/API/Concepts/cliconcepts.htm
            org.opencontainers.image.url=https://github.com/${{ steps.repo-owner.outputs.repo-owner }}/docker-images/pkgs/container/oci-cli
            org.opencontainers.image.base.name=ghcr.io/${{ steps.repo-owner.outputs.repo-owner }}/oci-cli:latest
          tags: |
            type=raw,value=${{ env.VERSION }}
            type=schedule,pattern={{date 'YYYYMMDD'}}
            type=sha

      - name: Build and push image
        if: env.SKIP_BUILD != 'true'
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          context: ./OracleCloudInfrastructure/oci-cli/
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64, linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Skip build notification
        if: env.SKIP_BUILD == 'true'
        run: echo "Skipping build since the image for OCI CLI version $VERSION already exists."